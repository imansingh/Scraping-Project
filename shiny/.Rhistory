'tester_gender' = tester_gender,
'tester_age' = tester_age,
'tester_level' = tester_level,
'tester_strokes'= tester_strokes,
'tester_spin' = tester_spin,
'tester_playstyle' = tester_playstyle,
'racquet_manufacturer' = racquet_manufacturer,
'racquet_model' = racquet_model,
'frame_size' = frame_size,
'string_pattern' = string_pattern,
'main_tension' = main_tension,
'cross_tension' = cross_tension,
'string_material' = string_material,
'string_construction' = string_construction,
'string_features' = string_features,
'string_gauge_metric' = string_gauge_metric,
'string_gauge_us' = string_gauge_us,
'price_adjusted' = price_adjusted,
'string_adjectives' = review_adjectives_split)
string_data_criteria = string_data1 %>%
select(string_name, num_ratings, price_adjusted,
string_material, string_construction, string_features,
string_gauge_metric, string_gauge_us, string_adjectives,
tester_name, tester_reviews, tester_gender, tester_age, tester_level,
tester_playstyle, tester_strokes, tester_spin,
racquet_manufacturer, racquet_model, string_pattern, frame_size,
main_tension, cross_tension,
comfort, control, durability, feel, power, spin, tension_stability,
tester_satisfaction, review_text)
runApp()
runApp()
View(string_data1)
runApp()
runApp()
adjective_pct_sample_mtx
View(string_data1)
string_data1 %>% group_by(string_name)
string_data <- read.csv(file = "./stringforum.csv")
string_data$comfort
string_data$comfort[!is.na(string_data$comfort)]
sum(string_data$comfort[!is.na(string_data$comfort)])
sum(string_data$comfort[!is.na(string_data$comfort)])/(length(string_data$comfort[!is.na(string_data$comfort)]) * 3)
string_data$comfort + 6
test = (string_data$comfort + 3 / 6)
test
test = (string_data$comfort + 3) / 6
test
names(string_data)
string_data$tester_satisfaction
table(string_data$comfort)
names(string_data)
view(string_data)
View(string_data)
string_data1 = string_data %>%
mutate(
comfort = (comfort + 3) / .06,
control = (control + 3) / .06,
durability = (durability + 3) / .06,
feel = (feel + 3) / .06,
power = (power +3) / .06,
spin = (spin + 3) / .06,
tension_stability = (tension_stability + 3) / .06,
tester_satisfaction = (tester_satisfaction + 1) / .06
)
string_data1 = mutate(string_data,
'tester_gender' = tester_gender,
'tester_age' = tester_age,
'tester_level' = tester_level,
'tester_strokes'= tester_strokes,
'tester_spin' = tester_spin,
'tester_playstyle' = tester_playstyle,
'racquet_manufacturer' = racquet_manufacturer,
'racquet_model' = racquet_model,
'frame_size' = frame_size,
'string_pattern' = string_pattern,
'main_tension' = main_tension,
'cross_tension' = cross_tension,
'string_material' = string_material,
'string_construction' = string_construction,
'string_features' = string_features,
'string_gauge_metric' = string_gauge_metric,
'string_gauge_us' = string_gauge_us,
'price_adjusted' = price_adjusted,
'string_adjectives' = review_adjectives_split)
string_data_criteria = string_data1 %>%
select(string_name, num_ratings, price_adjusted,
string_material, string_construction, string_features,
string_gauge_metric, string_gauge_us, string_adjectives,
tester_name, tester_reviews, tester_gender, tester_age, tester_level,
tester_playstyle, tester_strokes, tester_spin,
racquet_manufacturer, racquet_model, string_pattern, frame_size,
main_tension, cross_tension,
comfort, control, durability, feel, power, spin, tension_stability,
tester_satisfaction, review_text)
write.csv(string_data_criteria, file = string_data_criteria)
write.csv(string_data_criteria, file = 'string_data_criteria')
write.csv(string_data_criteria)
write.csv(string_data1)
string_data1 = string_data %>%
mutate(
comfort = (comfort + 3) / .06,
control = (control + 3) / .06,
durability = (durability + 3) / .06,
feel = (feel + 3) / .06,
power = (power +3) / .06,
spin = (spin + 3) / .06,
tension_stability = (tension_stability + 3) / .06,
tester_satisfaction = (tester_satisfaction + 1) / .06
)
string_data1 = string_data %>%
mutate(
comfort = (comfort + 3) / .06,
control = (control + 3) / .06,
durability = (durability + 3) / .06,
feel = (feel + 3) / .06,
power = (power +3) / .06,
spin = (spin + 3) / .06,
tension_stability = (tension_stability + 3) / .06,
tester_satisfaction = (tester_satisfaction + 1) / .02
)
string_data1 = mutate(string_data,
'tester_gender' = tester_gender,
'tester_age' = tester_age,
'tester_level' = tester_level,
'tester_strokes'= tester_strokes,
'tester_spin' = tester_spin,
'tester_playstyle' = tester_playstyle,
'racquet_manufacturer' = racquet_manufacturer,
'racquet_model' = racquet_model,
'frame_size' = frame_size,
'string_pattern' = string_pattern,
'main_tension' = main_tension,
'cross_tension' = cross_tension,
'string_material' = string_material,
'string_construction' = string_construction,
'string_features' = string_features,
'string_gauge_metric' = string_gauge_metric,
'string_gauge_us' = string_gauge_us,
'price_adjusted' = price_adjusted,
'string_adjectives' = review_adjectives_split)
string_data_criteria = string_data1 %>%
select(string_name, num_ratings, price_adjusted,
string_material, string_construction, string_features,
string_gauge_metric, string_gauge_us, string_adjectives,
tester_name, tester_reviews, tester_gender, tester_age, tester_level,
tester_playstyle, tester_strokes, tester_spin,
racquet_manufacturer, racquet_model, string_pattern, frame_size,
main_tension, cross_tension,
comfort, control, durability, feel, power, spin, tension_stability,
tester_satisfaction, review_text)
write.csv(string_data1)
names(string_data1)
string_data1 = string_data %>%
mutate(
comfort = (comfort + 3) / .06,
control = (control + 3) / .06,
durability = (durability + 3) / .06,
feel = (feel + 3) / .06,
power = (power +3) / .06,
spin = (spin + 3) / .06,
tension_stability = (tension_stability + 3) / .06,
tester_satisfaction = (tester_satisfaction + 1) / .02
)
string_data1 = mutate(string_data1,
'tester_gender' = tester_gender,
'tester_age' = tester_age,
'tester_level' = tester_level,
'tester_strokes'= tester_strokes,
'tester_spin' = tester_spin,
'tester_playstyle' = tester_playstyle,
'racquet_manufacturer' = racquet_manufacturer,
'racquet_model' = racquet_model,
'frame_size' = frame_size,
'string_pattern' = string_pattern,
'main_tension' = main_tension,
'cross_tension' = cross_tension,
'string_material' = string_material,
'string_construction' = string_construction,
'string_features' = string_features,
'string_gauge_metric' = string_gauge_metric,
'string_gauge_us' = string_gauge_us,
'price_adjusted' = price_adjusted,
'string_adjectives' = review_adjectives_split)
string_data_criteria = string_data1 %>%
select(string_name, num_ratings, price_adjusted,
string_material, string_construction, string_features,
string_gauge_metric, string_gauge_us, string_adjectives,
tester_name, tester_reviews, tester_gender, tester_age, tester_level,
tester_playstyle, tester_strokes, tester_spin,
racquet_manufacturer, racquet_model, string_pattern, frame_size,
main_tension, cross_tension,
comfort, control, durability, feel, power, spin, tension_stability,
tester_satisfaction, review_text)
string_data1 %>% group_by(string_name) %>% summarise(mean())
string_data1 %>% group_by(string_name) %>% summarise(mean(comfort))
string_data1 %>% group_by(string_name) %>% summarise(mean(c(comfort, control))
adjective_pct_string_mtx =
sapply(adjectives_list, get_adjective_pct,
string_list = get_string_data_specific()$string_adjectives)
adjective_pct_sample_mtx =
sapply(adjectives_list, get_adjective_pct,
string_list = get_string_data_filtered()$string_adjectives)
adjective_pct_full_mtx =
sapply(adjectives_list, get_adjective_pct,
string_list = string_data_criteria$string_adjectives)
adjective_pct_string_means = colMeans(adjective_pct_string_mtx)
adjective_pct_sample_means = colMeans(adjective_pct_sample_mtx)
adjective_pct_full_means = colMeans(adjective_pct_full_mtx)
# create empty vectors for efficiency
adjective_pct_sample_percentile =
vector(mode = "double", length = length(adjective_pct_string_means))
adjective_pct_full_percentile =
vector(mode = "double", length = length(adjective_pct_string_means))
# get percentile for each column
# note: since the matrixes are not grouped by string, these are not really
#       percentile of a string within a larger group of strings
#       we are actually computing percentile of a string (mean value
#       of all the reviews) within the larger group of all reviews.
for(i in seq_along(adjective_pct_string_means)){
adjective_pct_sample_percentile[i] =
ecdf(adjective_pct_sample_mtx[ ,i])(adjective_pct_string_means[i]) * 100
adjective_pct_full_percentile[i] =
ecdf(adjective_pct_full_mtx[, i])(adjective_pct_string_means[i]) * 100
}
#    adjective_pct_string_sd = apply(adjective_pct_string_mtx, 2, sd)
adjective_pct_sample_sd = apply(adjective_pct_sample_mtx, 2, sd)
adjective_pct_full_sd = apply(adjective_pct_full_mtx, 2, sd)
adjective_pct_sample_sd = apply(adjective_pct_sample_mtx, 2, sd)
adjective_pct_full_sd = apply(adjective_pct_full_mtx, 2, sd)
adjective_pct_sample_z =
(adjective_pct_string_means - adjective_pct_sample_means) /
adjective_pct_sample_sd
adjective_pct_full_z =
(adjective_pct_string_means - adjective_pct_full_means) /
adjective_pct_full_sd
# adjective_pct_sample_z =
#   (adjective_pct_string_means - adjective_pct_sample_means) /
#   adjective_pct_sample_sd
#
# adjective_pct_full_z =
#   (adjective_pct_string_means - adjective_pct_full_means) /
#   adjective_pct_full_sd
#
# adjective_pct_string_vec = sapply(adjectives_list, get_adjective_pct2,
#                                   vec = all_adjectives_string,
#                                   df = get_string_data_specific())
#
# adjective_pct_sample_vec = sapply(adjectives_list, get_adjective_pct2,
#                                   vec = all_adjectives_sample,
#                                   df = get_string_data_filtered())
#
# adjective_pct_full_vec = sapply(adjectives_list, get_adjective_pct2,
#                                   vec = all_adjectives_full,
#                                   df = string_data1)
brks_adj_string_means = quantile(adjective_pct_string_means,
probs = seq(.05, .95, .05))
brks_adj_sample_means = quantile(adjective_pct_sample_means,
probs = seq(.05, .95, .05))
brks_adj_full_means = quantile(adjective_pct_full_means,
probs = seq(.05, .95, .05))
brks_adj_sample_percentile = quantile(adjective_pct_sample_percentile,
probs = seq(.05, .95, .05))
brks_adj_full_percentile = quantile(adjective_pct_full_percentile,
probs = seq(.05, .95, .05))
brks_adj_sample_z = quantile(adjective_pct_sample_z,
probs = seq(.05, .95, .05))
brks_adj_full_z = quantile(adjective_pct_full_z,
probs = seq(.05, .95, .05))
adjective_count_df = data.frame(adjectives_list,
adjective_pct_string_means =
round(adjective_pct_string_means / 100, 1),
adjective_pct_sample_means =
round(adjective_pct_sample_means / 100, 1),
adjective_pct_sample_percentile =
round(adjective_pct_sample_percentile, 1),
adjective_pct_sample_z =
round(adjective_pct_sample_z, 2),
adjective_pct_full_means =
round(adjective_pct_full_means / 100, 1),
adjective_pct_full_percentile =
round(adjective_pct_full_percentile, 1),
adjective_pct_full_z =
round(adjective_pct_full_z, 2)) %>%
arrange(adjective_pct_string_means)
datatable(adjective_count_df, rownames=FALSE,
caption = 'selected sample = what is selected in search criteria',
colnames = c('adjectives', 'prevalence - selected string',
'prevalence - selected sample', 'percentile - string within sample',
'z score - string within sample', 'prevalence - all reviews',
'percentile - all reviews', 'z score - all reviews'),
#extensions = list('ColReorder'), #, 'FixedColumns', 'Responsive'),
options = (list(scrollX = TRUE, scrollY=TRUE, paging = FALSE,
#colReorder = TRUE,
# fixedColumns = TRUE,
autoWidth = TRUE)))  %>%
# formatRound(columns = c('comfort', 'control', 'durability', 'feel',
#                         'power', 'spin', 'tension_stab',
#                         'satisfaction', 'characteristics_score',
#                         'soft', 'comfortable', 'flexible', 'precise',
#                         'resilient', 'explosive', 'innovative', 'unique',
#                         'spongy', 'stiff', 'dull', 'lively', 'stretchy',
#                         'crispy', 'boring', 'elastic', 'solid', 'rough',
#                         'wire_like', 'springy', 'sluggish', 'outdated',
#                         'adjectives_score'),
#             digits = 4) %>%
formatPercentage(columns = c('adjective_pct_string_means',
'adjective_pct_sample_means',
'adjective_pct_full_means'), digits = 1) %>%
formatStyle(columns = 'adjective_pct_string_means',
backgroundColor = styleInterval(brks_adj_string_means, clrs)) %>%
formatStyle(columns = 'adjective_pct_sample_means',
backgroundColor = styleInterval(brks_adj_sample_means, clrs)) %>%
formatStyle(columns = 'adjective_pct_sample_percentile',
backgroundColor = styleInterval(brks_adj_sample_percentile, clrs)) %>%
formatStyle(columns = 'adjective_pct_sample_z',
backgroundColor = styleInterval(brks_adj_sample_z, clrs)) %>%
formatStyle(columns = 'adjective_pct_full_means',
backgroundColor = styleInterval(brks_adj_full_means, clrs)) %>%
formatStyle(columns = 'adjective_pct_full_percentile',
backgroundColor = styleInterval(brks_adj_full_percentile, clrs)) %>%
formatStyle(columns = 'adjective_pct_full_z',
backgroundColor = styleInterval(brks_adj_full_z, clrs))
})
string_data1 %>% group_by(string_name) %>% summarise(mean(c(comfort, control)))
string_data1 %>% group_by(string_name) %>% summarise(mean(comfort), mean(control))
names(string_data)
test = string_data[1,]
test
View(test)
test %>% group_by(string_name) %>% summarise(mean(comfort))
get_characteristics_scores = function(df){
df = df %>%
group_by(string_name) %>%
summarise(mean(comfort), mean(control), mean(durability), mean(feel),
mean(power), mean(spin), mean(tension_stability),
mean(tester_satisfaction))
}
get_characteristics_scores(string_data)
string_data
get_characteristics_scores(string_data)
string_data
get_characteristics_scores = function(df){
df = df %>%
group_by(string_name) %>%
summarise(mean(comfort), mean(control), mean(durability), mean(feel),
mean(power), mean(spin), mean(tension_stability),
mean(tester_satisfaction))
return(df)
}
test = get_characteristics_scores(string_data)
test
get_characteristics_scores = function(df){
df %>%
group_by(string_name) %>%
summarise(mean(comfort), mean(control), mean(durability), mean(feel),
mean(power), mean(spin), mean(tension_stability),
mean(tester_satisfaction))
}
test = string_data[1,]
test = get_characteristics_scores(string_data)
test
get_characteristics_means = function(df){
df %>%
group_by(string_name) %>%
summarise(mean(comfort), mean(control), mean(durability), mean(feel),
mean(power), mean(spin), mean(tension_stability),
mean(tester_satisfaction))
}
names(test)
get_characteristics_data = function(df){
df %>%
group_by(string_name) %>%
summarise(mean(comfort), mean(control), mean(durability), mean(feel),
mean(power), mean(spin), mean(tension_stability),
mean(tester_satisfaction), sd(comfort), quantile(comfort))
}
test = get_characteristics_data(string_data_criteria)
get_characteristics_data = function(df){
df %>%
group_by(string_name) %>%
summarise(mean(comfort), mean(control), mean(durability), mean(feel),
mean(power), mean(spin), mean(tension_stability),
mean(tester_satisfaction), sd(comfort), quantile(2))
}
test = get_characteristics_data(string_data_criteria)
get_characteristics_data = function(df){
df %>%
group_by(string_name) %>%
summarise(mean(comfort), mean(control), mean(durability), mean(feel),
mean(power), mean(spin), mean(tension_stability),
mean(tester_satisfaction), sd(comfort), quantile(comfort))
}
test = get_characteristics_data(string_data_criteria)
View(string_data_criteria)
get_characteristics_data = function(df){
df %>%
group_by(string_name) %>%
summarise(mean(comfort), mean(control), mean(durability), mean(feel),
mean(power), mean(spin), mean(tension_stability),
mean(tester_satisfaction), sd(comfort))#, #quantile(comfort))
}
test = get_characteristics_data(string_data_criteria)
test
view(Test)
View(test)
mean(string_data_criteria$comfort)
mean(string_data_criteria$comfort, na.rm = TRUE)
mean(string_data_criteria[[comfort]], na.rm = TRUE)
test = string_data_criteria %>%
mean(comfort)
mean(NA)
mean(NA, na.rm = TRUE)
test=string_dat_criteria[1]
test=string_data_criteria[1]
mean(test$durability, na.rm = TRUE)
characteristics_full_means =
c(mean(string_data_criteria$comfort, na.rm = TRUE),
mean(string_data_criteria$control, na.rm = TRUE),
mean(string_data_criteria$durability, na.rm = TRUE),
mean(string_data_criteria$feel, na.rm = TRUE),
mean(string_data_criteria$power, na.rm = TRUE),
mean(string_data_criteria$spin, na.rm = TRUE),
mean(string_data_criteria$tension_stability, na.rm = TRUE),
mean(string_data_criteria$tester_satisfaction, na.rm = TRUE)
)
characteristics_full_means
characteristics_list = c('comfort', 'control', 'durability', 'feel', 'power',
'spin', 'tension_stability', 'overall_satisfaction')
runApp()
brks_adj_full_z = quantile(adjective_pct_full_z,
probs = seq(.05, .95, .05))
brks_adj_full_z
adjective_pct_full_z =
(adjective_pct_string_means - adjective_pct_full_means) /
adjective_pct_full_sd
brks_adj_full_z = quantile(adjective_pct_full_z,
probs = seq(.05, .95, .05))
brks_adj_full_z
adjective_pct_full_z
adjective_pct_full_mtx =
sapply(adjectives_list, get_adjective_pct,
string_list = string_data_criteria$string_adjectives)
adjective_pct_full_means = colMeans(adjective_pct_full_mtx)
adjective_pct_full_sd = apply(adjective_pct_full_mtx, 2, sd)
adjective_pct_full_z =
(adjective_pct_string_means - adjective_pct_full_means) /
adjective_pct_full_sd
brks_adj_full_z = quantile(adjective_pct_full_z,
probs = seq(.05, .95, .05))
brks_adj_full_z
adjective_pct_full_z =
(adjective_pct_string_means - adjective_pct_full_means) /
adjective_pct_full_sd
adjective_pct_string_mtx =
sapply(adjectives_list, get_adjective_pct,
string_list = string_data_criteria[1]$string_adjectives)
adjective_pct_string_means = colMeans(adjective_pct_string_mtx)
adjective_pct_string_mtx =
sapply(adjectives_list, get_adjective_pct,
string_list = string_data_criteria[1,]$string_adjectives)
adjective_pct_string_means = colMeans(adjective_pct_string_mtx)
adjective_pct_full_z =
(adjective_pct_string_means - adjective_pct_full_means) /
adjective_pct_full_sd
brks_adj_full_z = quantile(adjective_pct_full_z,
probs = seq(.05, .95, .05))
brks_adj_full_z
pnorm(adjective_pct_full_z)
seq(5,95,5)
brks_percentile = seq(5,95,5)
runApp()
qnorm(5)
qnorm(95)
qnorm(p = seq(5,95,5))
qnorm(p = seq(5,95,5), mean = 0)
pnorm(1)
qnorm(0.95)
qnorm(.05)
qnorm(seq(.05,.95,5))
qnorm(seq(.05,.95,.05))
brks_z = qnorm(seq(.05,.95,.05))
runApp()
string_data_criteria = string_data1 %>%
select(string_name, num_ratings, price_adjusted,
string_material, string_construction, string_features,
string_gauge_metric, string_gauge_us, string_adjectives,
tester_name, tester_reviews, tester_gender, tester_age, tester_level,
tester_playstyle, tester_strokes, tester_spin,
racquet_manufacturer, racquet_model, string_pattern, frame_size,
main_tension, cross_tension,
comfort, control, durability, feel, power, spin, tension_stability,
overall_satisfaction = tester_satisfaction, review_text)
View(string_data_criteria)
runApp()
runApp()
runApp()
adjectives_list = c('soft', 'comfortable', 'flexible', 'precise',
'resilient', 'explosive', 'innovative', 'unique',
'spongy', 'stiff', 'dull', 'lively', 'stretchy',
'crispy', 'boring', 'elastic', 'solid', 'rough',
'wire_like', 'springy', 'sluggish', 'outdated')
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(DT)
library(data.table)
library(tm)
library(wordcloud)
library(memoise)
