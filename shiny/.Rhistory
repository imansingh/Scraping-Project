springy * vec[1] +
sluggish * vec[1] +
outdated * vec[1]) %>%
arrange(desc(selector_adjectives))
string_adjectives_weighted_test = string_adjectives_means_test %>%
mutate(selector_adjectives =
soft * vec[1] +
comfortable * vec[1] +
flexible * vec[1] +
precise * vec[1] +
resilient * vec[1] +
explosive * vec[1] +
innovative * vec[1] +
unique * vec[1] +
spongy * vec[1] +
stiff * vec[1] +
dull * vec[1] +
lively * vec[1] +
stretchy  * vec[1] +
crispy * vec[1] +
boring * vec[1] +
elastic * vec[1] +
solid * vec[1] +
rough * vec[1] +
wire_like * vec[1] +
springy * vec[1] +
sluggish * vec[1] +
outdated * vec[1]) %>%
arrange(desc(selector_adjectives))
View(string_adjectives_pct_test)
View(string_adjectives_weighted_test)
string_adjectives_weighted_test = string_adjectives_means_test %>%
mutate(selector_adjectives =
soft * vec[1] +
comfortable * vec[2] +
flexible * vec[3] +
precise * vec[4] +
resilient * vec[5] +
explosive * vec[6] +
innovative * vec[7] +
unique * vec[8] +
spongy * vec[9] +
stiff * vec[10] +
dull * vec[11] +
lively * vec[12] +
stretchy  * vec[13] +
crispy * vec[14] +
boring * vec[15] +
elastic * vec[16] +
solid * vec[17] +
rough * vec[18] +
wire_like * vec[19] +
springy * vec[20] +
sluggish * vec[21] +
outdated * vec[22]) %>%
arrange(desc(selector_adjectives))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(string_means_weighted)
runApp()
test = scale(string_adjectives_weighted_test)
typeof(string_adjectives_weighted_test)
typeof(string_adjectives_mean_test)
typeof(string_adjectives_means_test)
test = scale(string_adjectives_weighted_test$selector_adjectives)
test
string_characteristics_weighted_test = string_data1 %>% #get_string_data_filtered() %>%
# group filtered data frame by string names
group_by(string_name) %>%
# get the mean scores for each string
summarise(reviews_selected = n(),
comfort = mean(comfort, na.rm=TRUE),
control = mean(control, na.rm=TRUE),
durability = mean(durability, na.rm=TRUE),
feel = mean(feel, na.rm=TRUE),
power = mean(power, na.rm=TRUE),
spin = mean(spin, na.rm=TRUE),
tension_stab = mean(tension_stability, na.rm=TRUE),
satisfaction = mean(tester_satisfaction, na.rm=TRUE)) %>%
# multiply means by input to get weighted means, then sum to get score
mutate(selector_characteristics =
comfort * input$string_comfort +
control * input$string_control +
durability * input$string_durability +
feel * input$string_feel +
power * input$string_power +
spin * input$string_spin +
tension_stab * input$string_tension_stability +
satisfaction * input$string_tester_satisfaction) %>%
arrange(desc(selector_characteristics))
vec[1]
vec = sample(c(1:10), 8)
vec[1]
vec[2]
vec[3]
vec[4]
vec[5]
string_characteristics_weighted_test = string_data1 %>% #get_string_data_filtered() %>%
# group filtered data frame by string names
group_by(string_name) %>%
# get the mean scores for each string
summarise(reviews_selected = n(),
comfort = mean(comfort, na.rm=TRUE),
control = mean(control, na.rm=TRUE),
durability = mean(durability, na.rm=TRUE),
feel = mean(feel, na.rm=TRUE),
power = mean(power, na.rm=TRUE),
spin = mean(spin, na.rm=TRUE),
tension_stab = mean(tension_stability, na.rm=TRUE),
satisfaction = mean(tester_satisfaction, na.rm=TRUE)) %>%
# multiply means by input to get weighted means, then sum to get score
mutate(selector_characteristics =
comfort * vec[8] + #input$string_comfort +
control * vec[7] +#input$string_control +
durability * vec[1] +#input$string_durability +
feel * vec[2] +#input$string_feel +
power * vec[3] +#input$string_power +
spin * vec[4] +#input$string_spin +
tension_stab * vec[5] +#input$string_tension_stability +
satisfaction * vec[6] +#input$string_tester_satisfaction) %>%
arrange(desc(selector_characteristics))
string_adjectives_weighted = get_string_data_filtered() %>%
# remove reviews with no adjectives listed
filter(!(is.na(string_adjectives))) %>%
# for each review get percentage of adjectives listed matching adjective
mutate(soft = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'soft')) %>%
mutate(comfortable = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'comfortable')) %>%
mutate(flexible = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'flexible')) %>%
mutate(precise = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'precise')) %>%
mutate(resilient = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'resilient')) %>%
mutate(explosive = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'explosive')) %>%
mutate(innovative = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'innovative')) %>%
mutate(unique = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'unique')) %>%
mutate(spongy = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'spongy')) %>%
mutate(stiff = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'stiff')) %>%
mutate(dull = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'dull')) %>%
mutate(lively = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'lively')) %>%
mutate(stretchy = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'stretchy')) %>%
mutate(crispy = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'crispy')) %>%
mutate(boring = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'boring')) %>%
mutate(elastic = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'elastic')) %>%
mutate(solid = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'solid')) %>%
mutate(rough = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'rough')) %>%
mutate(wire_like = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'wire-like')) %>%
mutate(springy = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'springy')) %>%
mutate(sluggish = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'sluggish')) %>%
mutate(outdated = get_adjective_pct(
get_string_data_filtered()$string_adjectives, 'outdated')) %>%
# group reviews by string name
group_by(string_name) %>%
# for reviews grouped by string name get mean % for each adjective
summarise(reviews_selected = n(),
soft = mean(soft),
comfortable = mean(comfortable),
flexible = mean(flexible),
precise = mean (precise),
resilient = mean(resilient),
explosive = mean(explosive),
innovative = mean(innovative),
unique = mean(unique),
spongy = mean(spongy),
stiff = mean(stiff),
dull = mean(dull),
lively = mean(lively),
stretchy  = mean(stretchy),
crispy = mean(crispy),
boring = mean(boring),
elastic = mean(elastic),
solid = mean(solid),
rough = mean(rough),
wire_like = mean(wire_like),
springy = mean(springy),
sluggish = mean(sluggish),
outdated = mean(outdated)) %>%
# multiply means by user input to get weighted means, then sum for score
mutate(selector_adjectives =
soft * input$soft +
comfortable * input$comfortable +
flexible * input$flexible +
precise * input$precise +
resilient * input$resilient +
explosive * input$explosive +
innovative * input$innovative +
unique * input$unique +
spongy * input$spongy +
stiff * input$stiff +
dull * input$dull +
lively * input$lively +
stretchy  * input$stretchy +
crispy * input$crispy +
boring * input$boring +
elastic * input$elastic +
solid * input$solid +
rough * input$rough +
wire_like * input$wire_like +
springy * input$springy +
sluggish * input$sluggish +
outdated * input$outdated) %>%
arrange(desc(selector_adjectives))
datatable(string_characteristics_weighted, rownames=TRUE,
extensions = list('ColReorder', 'FixedColumns', 'Responsive'),
options = (list(scrollX = TRUE, scrollY=TRUE, colReorder = TRUE,
fixedColumns = TRUE, autoWidth = TRUE))) %>%
#columnDefs = list(list(width = '200px', targets= c(7,8)))) %>%
formatRound(columns = c('comfort', 'control', 'durability', 'feel',
'power', 'spin', 'tension_stab', 'satisfaction'),
digits = 4)
# datatable(string_adjectives_weighted, rownames=TRUE,
#           extensions = list('ColReorder', 'FixedColumns', 'Responsive'),
#           options = (list(scrollX = TRUE, scrollY=TRUE, colReorder = TRUE,
#                           fixedColumns = TRUE, autoWidth = TRUE)))
#
#%>%
#columnDefs = list(list(width = '200px', targets= c(7,8)))) %>%
# formatRound(columns = c('comfort', 'control', 'durability', 'feel',
#                         'power', 'spin', 'tension_stab', 'satisfaction'),
#            digits = 4)
})
string_characteristics_weighted_test = string_data1 %>% #get_string_data_filtered() %>%
# group filtered data frame by string names
group_by(string_name) %>%
# get the mean scores for each string
summarise(reviews_selected = n(),
comfort = mean(comfort, na.rm=TRUE),
control = mean(control, na.rm=TRUE),
durability = mean(durability, na.rm=TRUE),
feel = mean(feel, na.rm=TRUE),
power = mean(power, na.rm=TRUE),
spin = mean(spin, na.rm=TRUE),
tension_stab = mean(tension_stability, na.rm=TRUE),
satisfaction = mean(tester_satisfaction, na.rm=TRUE)) %>%
# multiply means by input to get weighted means, then sum to get score
mutate(selector_characteristics =
comfort * vec[8] + #input$string_comfort +
control * vec[7] +#input$string_control +
durability * vec[1] +#input$string_durability +
feel * vec[2] +#input$string_feel +
power * vec[3] +#input$string_power +
spin * vec[4] +#input$string_spin +
tension_stab * vec[5] +#input$string_tension_stability +
satisfaction * vec[6]) %>% +#input$string_tester_satisfaction) %>%
arrange(desc(selector_characteristics))
string_characteristics_weighted_test = string_data1 %>% #get_string_data_filtered() %>%
# group filtered data frame by string names
group_by(string_name) %>%
# get the mean scores for each string
summarise(reviews_selected = n(),
comfort = mean(comfort, na.rm=TRUE),
control = mean(control, na.rm=TRUE),
durability = mean(durability, na.rm=TRUE),
feel = mean(feel, na.rm=TRUE),
power = mean(power, na.rm=TRUE),
spin = mean(spin, na.rm=TRUE),
tension_stab = mean(tension_stability, na.rm=TRUE),
satisfaction = mean(tester_satisfaction, na.rm=TRUE)) %>%
# multiply means by input to get weighted means, then sum to get score
mutate(selector_characteristics =
comfort * vec[8] + #input$string_comfort +
control * vec[7] +#input$string_control +
durability * vec[1] +#input$string_durability +
feel * vec[2] +#input$string_feel +
power * vec[3] +#input$string_power +
spin * vec[4] +#input$string_spin +
tension_stab * vec[5] +#input$string_tension_stability +
satisfaction * vec[6]) %>% +#input$string_tester_satisfaction) %>%
arrange(desc(selector_characteristics))
string_characteristics_weighted_test = string_data1 %>% #get_string_data_filtered() %>%
# group filtered data frame by string names
group_by(string_name) %>%
# get the mean scores for each string
summarise(reviews_selected = n(),
comfort = mean(comfort, na.rm=TRUE),
control = mean(control, na.rm=TRUE),
durability = mean(durability, na.rm=TRUE),
feel = mean(feel, na.rm=TRUE),
power = mean(power, na.rm=TRUE),
spin = mean(spin, na.rm=TRUE),
tension_stab = mean(tension_stability, na.rm=TRUE),
satisfaction = mean(tester_satisfaction, na.rm=TRUE)) %>%
# multiply means by input to get weighted means, then sum to get score
mutate(selector_characteristics =
comfort * vec[8] + #input$string_comfort +
control * vec[7] +#input$string_control +
durability * vec[1] +#input$string_durability +
feel * vec[2] +#input$string_feel +
power * vec[3] +#input$string_power +
spin * vec[4] +#input$string_spin +
tension_stab * vec[5] +#input$string_tension_stability +
satisfaction * vec[6]) #%>% +#input$string_tester_satisfaction) %>%
string_characteristics_weighted = get_string_data_filtered() %>%
# group filtered data frame by string names
group_by(string_name) %>%
# get the mean scores for each string
summarise(reviews_selected = n(),
comfort = mean(comfort, na.rm=TRUE),
control = mean(control, na.rm=TRUE),
durability = mean(durability, na.rm=TRUE),
feel = mean(feel, na.rm=TRUE),
power = mean(power, na.rm=TRUE),
spin = mean(spin, na.rm=TRUE),
tension_stab = mean(tension_stability, na.rm=TRUE),
satisfaction = mean(tester_satisfaction, na.rm=TRUE)) %>%
# multiply means by input to get weighted means, then sum to get score
mutate(selector_characteristics =
comfort * input$string_comfort +
control * input$string_control +
durability * input$string_durability +
feel * input$string_feel +
power * input$string_power +
spin * input$string_spin +
tension_stab * input$string_tension_stability +
satisfaction * input$string_tester_satisfaction) %>%
arrange(desc(selector_characteristics))
string_characteristics_weighted_test
View(string_characteristics_weighted_test)
string_characteristics_weighted_test = string_characteristics_weighted_test %>%
arrange(desc(selector_characteristics))
View(string_characteristics_weighted_test)
View(test)
vec = sample(c(1:10), 8)
test1 = scale(string_characteristics_weighted_test$selector_characteristics)
test1
View(test1)
runApp()
runApp()
string_adjectives_weighted_test1 = mutate(string_adjectives_weighted_test,
selector_adjectives =
scale(selector_adjectives))
View(string_adjectives_weighted_test1)
runApp()
pnorm(string_adjectives_weighted_test$selector_adjectives)
pnorm(string_adjectives_weighted_test$selector_adjectives) * 100
runApp()
selector_table_both = full_join(string_characteristics_weighted_test,
string_adjectives_weighted_test,
by = 'string_name')
View(selector_table_both)
string_selector_both = full_join(string_characteristics_weighted_test,
string_adjectives_weighted_test,
by = 'string_name')
View(string_selector_both)
string_selector_both = string_characteristics_weighted_test %>%
full_join(string_adjectives_weighted_test,by = 'string_name')
string_selector_both = string_characteristics_weighted_test %>%
full_join(string_adjectives_weighted_test,by = 'string_name') %>%
mutate(combined_score =
scale(selector_characteristics) * vec[1] +
scale(selector_adjectives) * vec[2])
string_selector_both = string_characteristics_weighted_test %>%
full_join(string_adjectives_weighted_test,by = 'string_name') %>%
mutate(combined_score =
(scale(selector_characteristics) * vec[1] +
scale(selector_adjectives) * vec[2]) /
sum(vec[1], vec[2]))
string_selector_both = string_characteristics_weighted_test %>%
full_join(string_adjectives_weighted_test,by = 'string_name') %>%
mutate(combined_score = pnorm(
(scale(selector_characteristics) * vec[1] +
scale(selector_adjectives) * vec[2]) /
sum(vec[1], vec[2])))
string_selector_both = string_characteristics_weighted_test %>%
full_join(string_adjectives_weighted_test,by = 'string_name') %>%
mutate(combined_score = pnorm(
(scale(selector_characteristics) * vec[1] +
scale(selector_adjectives) * vec[2]) /
sum(vec[1], vec[2]))
* 100)
string_selector_both = string_characteristics_weighted_test %>%
full_join(string_adjectives_weighted_test,by = 'string_name') %>%
mutate(combined_score = pnorm(
(scale(selector_characteristics) * vec[1] +
scale(selector_adjectives) * vec[2]) /
sum(vec[1], vec[2]))
* 100) %>%
arrange(desc(combined_score))
string_selector_both = string_characteristics_weighted_test %>%
full_join(string_adjectives_weighted_test, by = 'string_name') %>%
mutate(combined_score = pnorm(
(scale(selector_characteristics) * vec[1] +
scale(selector_adjectives) * vec[2]) /
sum(vec[1], vec[2]))
* 100) %>%
arrange(desc(combined_score))
string_selector_both = string_characteristics_weighted_test %>%
full_join(string_adjectives_weighted_test, by = 'string_name') %>%
mutate(combined_score = pnorm(
(scale(selector_characteristics) * vec[1] +
scale(selector_adjectives) * vec[2]) /
sum(vec[1], vec[2]))
* 100)
sum(1,2)
string_selector_both$combined_score
string_selector_both = string_characteristics_weighted_test %>%
full_join(string_adjectives_weighted_test, by = 'string_name') %>%
mutate(combined_score = pnorm(
(scale(selector_characteristics) * vec[1] +
scale(selector_adjectives) * vec[2]) /
sum(vec[1], vec[2]))
* 100) %>%
arrange(desc(combined_score[,]))
runApp()
runApp()
runApp()
View(string_data1)
get_us_gauge = function(vector){
gauge_string = paste(vector, collapse = '')
if(gauge_string == '15L'){
gauge_string = 15
} else if(gauge_string == '16L'){
gauge_string = 16
} else if(gauge_string == '17L'){
gauge_string = 17
} else if(gauge_string == '18L'){
gauge_string = 18
} else if(gauge_string == '19L'){
gauge_string = 19
}
gauge_num = as.numeric(gauge_string)
if(!(is.na(gauge_num))){
if(gauge_num >= 1.34 & gauge_num <= 1.49){
gauge_num = 15
} else if(gauge_num >= 1.23 & gauge_num < 1.34){
gauge_num = 16
} else if(gauge_num >= 1.16 & gauge_num < 1.23){
gauge_num = 17
} else if(gauge_num >= 1.06 & gauge_num < 1.16){
gauge_num = 18
} else if(gauge_num >= .9 & gauge_num < 1.06){
gauge_num = 19
}
}
return(gauge_num)
}
string_gauge_metric = as.numeric(sapply(string_gauge_labeled, get_metric_gauge))
string_gauge_us = sapply(string_gauge_labeled, get_us_gauge)
string_data1 = mutate(string_data,
'tester_gender' = tester_gender,
'tester_age' = tester_age,
'tester_level' = tester_level,
'tester_strokes'= tester_strokes,
'tester_spin' = tester_spin,
'tester_playstyle' = tester_playstyle,
'racquet_manufacturer' = racquet_manufacturer,
'racquet_model' = racquet_model,
'frame_size' = frame_size,
'string_pattern' = string_pattern,
'main_tension' = main_tension,
'cross_tension' = cross_tension,
'string_material' = string_material,
'string_construction' = string_construction,
'string_features' = string_features,
'string_gauge_metric' = string_gauge_metric,
'string_gauge_us' = string_gauge_us,
'price_adjusted' = price_adjusted,
'string_adjectives' = review_adjectives_split)
length(unique(string_data1$tester_name)
#creating grouped dataframes by string_name, tester_racquet and tester_name
string_grouped = string_data %>% group_by(string_name)
racquet_grouped = string_data %>% group_by(tester_racquet)
tester_grouped = string_data %>% group_by(tester_name)
length(unique(string_data1$tester_name))
View(string_adjectives_weighted_test)
string_adjectives_weighted_scaled = scale(string_adjectives_weighted_test[,2:])
string_adjectives_weighted_scaled = scale(string_adjectives_weighted_test[:,2:])
string_adjectives_weighted_scaled = scale(string_adjectives_weighted_test[,2:25])
string_adjectives_weighted_scaled
View(string_adjectives_weighted_test1)
View(string_adjectives_weighted_test)
View(string_adjectives_weighted_scaled)
string_adjectives_weighted_scaled = scale(string_adjectives_weighted_test)
string_adjectives_weighted_scaled = scale(string_adjectives_weighted_test[,2:22])
string_aje
string_ajectives_weighted_scaled
string_adjectives_weighted_scaled
string_adjectives_weighted_scaled = scale(string_adjectives_weighted_test$
comfortable)
View(string_adjectives_weighted_scaled)
string_adjectives_weighted_scaled = scale(select(
string_adjectives_weighted_test, soft, comfortable))
View(string_adjectives_weighted_scaled)
string_adjectives_weighted_scaled = pnorm(scale(select(
string_adjectives_weighted_test, soft, comfortable)))
sapply(string_data, function(vec) sum(is.na(vec)))
sapply(string_data1, function(vec) sum(is.na(vec)))
sapply(string_data1, function(vec) sum(is.na(vec))/17517)
length(unique(string_data1$tester_name))
